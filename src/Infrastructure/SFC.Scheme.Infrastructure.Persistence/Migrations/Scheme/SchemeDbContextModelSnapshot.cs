// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFC.Scheme.Infrastructure.Persistence.Contexts;

#nullable disable

namespace SFC.Scheme.Infrastructure.Persistence.Migrations.Scheme
{
    [DbContext(typeof(SchemeDbContext))]
    partial class SchemeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Scheme")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.FootballPosition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("FootballPositions", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.GameStyle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("GameStyles", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.Shirt", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Shirts", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("StatCategories", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatSkill", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("StatSkills", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SkillId");

                    b.ToTable("StatTypes", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.WorkingFoot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("WorkingFoots", "Data");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.Metadata", b =>
                {
                    b.Property<int>("Service")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Service", "Type", "Domain");

                    b.HasIndex("Domain");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("Metadata", "Metadata");

                    b.HasData(
                        new
                        {
                            Service = 0,
                            Type = 0,
                            Domain = 0,
                            State = 1
                        },
                        new
                        {
                            Service = 1,
                            Type = 1,
                            Domain = 1,
                            State = 1
                        },
                        new
                        {
                            Service = 2,
                            Type = 1,
                            Domain = 2,
                            State = 1
                        },
                        new
                        {
                            Service = 3,
                            Type = 1,
                            Domain = 3,
                            State = 1
                        },
                        new
                        {
                            Service = 3,
                            Type = 0,
                            Domain = 0,
                            State = 1
                        },
                        new
                        {
                            Service = 3,
                            Type = 1,
                            Domain = 4,
                            State = 1
                        },
                        new
                        {
                            Service = 4,
                            Type = 0,
                            Domain = 0,
                            State = 1
                        },
                        new
                        {
                            Service = 4,
                            Type = 1,
                            Domain = 5,
                            State = 1
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.MetadataDomain", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Domains", "Metadata");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Data"
                        },
                        new
                        {
                            Id = 1,
                            Title = "User"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Player"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Team"
                        },
                        new
                        {
                            Id = 4,
                            Title = "TeamPlayer"
                        },
                        new
                        {
                            Id = 5,
                            Title = "TeamScheme"
                        },
                        new
                        {
                            Id = 6,
                            Title = "GameScheme"
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.MetadataService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services", "Metadata");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Data"
                        },
                        new
                        {
                            Id = 1,
                            Title = "Identity"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Player"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Team"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Scheme"
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.MetadataState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States", "Metadata");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Not Required"
                        },
                        new
                        {
                            Id = 1,
                            Title = "Required"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Done"
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.MetadataType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types", "Metadata");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Title = "Initialization"
                        },
                        new
                        {
                            Id = 1,
                            Title = "Seed"
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.Player", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerAvailability", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Availabilities", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerAvailableDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AvailabilityId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("AvailableDays", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerFootballProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("AdditionalPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("GameStyleId")
                        .HasColumnType("int");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<short?>("Number")
                        .HasColumnType("smallint");

                    b.Property<byte?>("PhysicalCondition")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte?>("Skill")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WeakFoot")
                        .HasColumnType("tinyint");

                    b.Property<short?>("Weight")
                        .HasColumnType("smallint");

                    b.Property<int?>("WorkingFootId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalPositionId");

                    b.HasIndex("GameStyleId");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkingFootId");

                    b.ToTable("FootballProfiles", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerGeneralProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Biography")
                        .HasMaxLength(1050)
                        .HasColumnType("nvarchar(1050)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("FreePlay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("GeneralProfiles", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerPhoto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Size")
                        .HasMaxLength(5242880)
                        .HasColumnType("int");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("Id");

                    b.ToTable("Photos", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Stats", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerStatPoints", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<short>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.ToTable("Points", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Tags", "Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.Formation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Formations", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.FormationPosition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("FootballPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FootballPositionId");

                    b.ToTable("FormationPositions", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.FormationValue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<int>("FormationPositionId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.HasIndex("FormationPositionId");

                    b.ToTable("FormationValues", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.SchemeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("SchemeTypes", "Scheme");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CreatedDate = new DateTime(2025, 5, 21, 12, 41, 14, 348, DateTimeKind.Utc).AddTicks(5281),
                            Title = "Formation"
                        },
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 21, 12, 41, 14, 348, DateTimeKind.Utc).AddTicks(5293),
                            Title = "Custom"
                        });
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Game.GameScheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("GameSchemes", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Game.GameTeamScheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("GameTeamSchemes", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamScheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamSchemes", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemeGeneralProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasMaxLength(1050)
                        .HasColumnType("nvarchar(1050)");

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.HasIndex("TypeId");

                    b.ToTable("TeamSchemeGeneralProfiles", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamSchemeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamSchemeId");

                    b.ToTable("TeamSchemePlayers", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayerPosition", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("FormationPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("X")
                        .HasColumnType("int");

                    b.Property<int?>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormationPositionId");

                    b.ToTable("TeamSchemePlayerPositions", "Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.Data.TeamPlayerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("PlayerStatuses", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.Team", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Teams", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Availabilities", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamFinancialProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("FreePlay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("FinancialProfiles", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamGeneralProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1050)
                        .HasColumnType("nvarchar(1050)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("GeneralProfiles", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamLogo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Size")
                        .HasMaxLength(5242880)
                        .HasColumnType("int");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("Id");

                    b.ToTable("Logos", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamShirt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ShirtId")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShirtId");

                    b.HasIndex("TeamId");

                    b.ToTable("Shirts", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Tags", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.Player.TeamPlayer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PlayerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Players", "Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatType", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Data.StatCategory", null)
                        .WithMany("Types")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Data.StatSkill", null)
                        .WithMany("Types")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Metadata.Metadata", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Metadata.MetadataDomain", null)
                        .WithMany()
                        .HasForeignKey("Domain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Metadata.MetadataService", null)
                        .WithMany()
                        .HasForeignKey("Service")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Metadata.MetadataState", null)
                        .WithMany()
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Metadata.MetadataType", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.Player", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerAvailability", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithOne("Availability")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.PlayerAvailability", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerAvailableDay", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.PlayerAvailability", "Availability")
                        .WithMany("Days")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerFootballProfile", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Data.FootballPosition", null)
                        .WithMany()
                        .HasForeignKey("AdditionalPositionId");

                    b.HasOne("SFC.Scheme.Domain.Entities.Data.GameStyle", null)
                        .WithMany()
                        .HasForeignKey("GameStyleId");

                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithOne("FootballProfile")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.PlayerFootballProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Data.FootballPosition", null)
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("SFC.Scheme.Domain.Entities.Data.WorkingFoot", null)
                        .WithMany()
                        .HasForeignKey("WorkingFootId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerGeneralProfile", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithOne("GeneralProfile")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.PlayerGeneralProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerPhoto", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithOne("Photo")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.PlayerPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerStat", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Data.StatType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerStatPoints", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithOne("Points")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Player.PlayerStatPoints", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerTag", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithMany("Tags")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.FormationPosition", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Data.FootballPosition", null)
                        .WithMany()
                        .HasForeignKey("FootballPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.FormationValue", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Data.Formation", null)
                        .WithMany("Values")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Data.FormationPosition", null)
                        .WithMany()
                        .HasForeignKey("FormationPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Game.GameScheme", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Game.GameTeamScheme", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamScheme", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemeGeneralProfile", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Data.Formation", null)
                        .WithMany()
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Team.TeamScheme", "Scheme")
                        .WithOne("GeneralProfile")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemeGeneralProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Data.SchemeType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayer", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Team.TeamScheme", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamSchemeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayerPosition", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Data.FormationPosition", null)
                        .WithMany()
                        .HasForeignKey("FormationPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayer", "Player")
                        .WithOne("Position")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayerPosition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.Team", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamAvailability", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithMany("Availability")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamFinancialProfile", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithOne("FinancialProfile")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Team.General.TeamFinancialProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamGeneralProfile", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithOne("GeneralProfile")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Team.General.TeamGeneralProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamLogo", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithOne("Logo")
                        .HasForeignKey("SFC.Scheme.Domain.Entities.Team.General.TeamLogo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamShirt", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Data.Shirt", null)
                        .WithMany()
                        .HasForeignKey("ShirtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithMany("Shirts")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.TeamTag", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithMany("Tags")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.Player.TeamPlayer", b =>
                {
                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Player.Player", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Team.Data.TeamPlayerStatus", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Team.General.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SFC.Scheme.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatCategory", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Data.StatSkill", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.Player", b =>
                {
                    b.Navigation("Availability")
                        .IsRequired();

                    b.Navigation("FootballProfile")
                        .IsRequired();

                    b.Navigation("GeneralProfile")
                        .IsRequired();

                    b.Navigation("Photo")
                        .IsRequired();

                    b.Navigation("Points")
                        .IsRequired();

                    b.Navigation("Stats");

                    b.Navigation("Tags");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Player.PlayerAvailability", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Data.Formation", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamScheme", b =>
                {
                    b.Navigation("GeneralProfile")
                        .IsRequired();

                    b.Navigation("Players");
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Scheme.Team.TeamSchemePlayer", b =>
                {
                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("SFC.Scheme.Domain.Entities.Team.General.Team", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("FinancialProfile")
                        .IsRequired();

                    b.Navigation("GeneralProfile")
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("Players");

                    b.Navigation("Shirts");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
